{
"version":3,
"file":"goog.string.newlines.js",
"lineCount":41,
"mappings":"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",
"sources":["goog/string/newlines.js"],
"sourcesContent":["// Copyright 2013 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for string newlines.\n * @author nnaze@google.com (Nathan Naze)\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string.newlines');\ngoog.provide('goog.string.newlines.Line');\n\ngoog.require('goog.array');\n\n\n/**\n * Splits a string into lines, properly handling universal newlines.\n * @param {string} str String to split.\n * @param {boolean=} opt_keepNewlines Whether to keep the newlines in the\n *     resulting strings. Defaults to false.\n * @return {!Array<string>} String split into lines.\n */\ngoog.string.newlines.splitLines = function(str, opt_keepNewlines) {\n  var lines = goog.string.newlines.getLines(str);\n  return goog.array.map(lines, function(line) {\n    return opt_keepNewlines ? line.getFullLine() : line.getContent();\n  });\n};\n\n\n\n/**\n * Line metadata class that records the start/end indicies of lines\n * in a string.  Can be used to implement common newline use cases such as\n * splitLines() or determining line/column of an index in a string.\n * Also implements methods to get line contents.\n *\n * Indexes are expressed as string indicies into string.substring(), inclusive\n * at the start, exclusive at the end.\n *\n * Create an array of these with goog.string.newlines.getLines().\n * @param {string} string The original string.\n * @param {number} startLineIndex The index of the start of the line.\n * @param {number} endContentIndex The index of the end of the line, excluding\n *     newlines.\n * @param {number} endLineIndex The index of the end of the line, index\n *     newlines.\n * @constructor\n * @struct\n * @final\n */\ngoog.string.newlines.Line = function(\n    string, startLineIndex, endContentIndex, endLineIndex) {\n  /**\n   * The original string.\n   * @type {string}\n   */\n  this.string = string;\n\n  /**\n   * Index of the start of the line.\n   * @type {number}\n   */\n  this.startLineIndex = startLineIndex;\n\n  /**\n   * Index of the end of the line, excluding any newline characters.\n   * Index is the first character after the line, suitable for\n   * String.substring().\n   * @type {number}\n   */\n  this.endContentIndex = endContentIndex;\n\n  /**\n   * Index of the end of the line, excluding any newline characters.\n   * Index is the first character after the line, suitable for\n   * String.substring().\n   * @type {number}\n   */\n\n  this.endLineIndex = endLineIndex;\n};\n\n\n/**\n * @return {string} The content of the line, excluding any newline characters.\n */\ngoog.string.newlines.Line.prototype.getContent = function() {\n  return this.string.substring(this.startLineIndex, this.endContentIndex);\n};\n\n\n/**\n * @return {string} The full line, including any newline characters.\n */\ngoog.string.newlines.Line.prototype.getFullLine = function() {\n  return this.string.substring(this.startLineIndex, this.endLineIndex);\n};\n\n\n/**\n * @return {string} The newline characters, if any ('\\n', \\r', '\\r\\n', '', etc).\n */\ngoog.string.newlines.Line.prototype.getNewline = function() {\n  return this.string.substring(this.endContentIndex, this.endLineIndex);\n};\n\n\n/**\n * Splits a string into an array of line metadata.\n * @param {string} str String to split.\n * @return {!Array<!goog.string.newlines.Line>} Array of line metadata.\n */\ngoog.string.newlines.getLines = function(str) {\n  // We use the constructor because literals are evaluated only once in\n  // < ES 3.1.\n  // See http://www.mail-archive.com/es-discuss@mozilla.org/msg01796.html\n  var re = RegExp('\\r\\n|\\r|\\n', 'g');\n  var sliceIndex = 0;\n  var result;\n  var lines = [];\n\n  while (result = re.exec(str)) {\n    var line = new goog.string.newlines.Line(\n        str, sliceIndex, result.index, result.index + result[0].length);\n    lines.push(line);\n\n    // remember where to start the slice from\n    sliceIndex = re.lastIndex;\n  }\n\n  // If the string does not end with a newline, add the last line.\n  if (sliceIndex < str.length) {\n    var line =\n        new goog.string.newlines.Line(str, sliceIndex, str.length, str.length);\n    lines.push(line);\n  }\n\n  return lines;\n};\n"],
"names":["goog","provide","require","string","newlines","splitLines","goog.string.newlines.splitLines","str","opt_keepNewlines","lines","getLines","array","map","line","getFullLine","getContent","Line","goog.string.newlines.Line","startLineIndex","endContentIndex","endLineIndex","prototype","goog.string.newlines.Line.prototype.getContent","substring","goog.string.newlines.Line.prototype.getFullLine","getNewline","goog.string.newlines.Line.prototype.getNewline","goog.string.newlines.getLines","re","RegExp","sliceIndex","result","exec","index","length","push","lastIndex"]
}
