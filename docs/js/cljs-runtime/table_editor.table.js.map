{"version":3,"sources":["table_editor/table.cljs"],"mappings":"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","names":["table-editor.table/table-row","row","on-change","header?","p1__43341#","p1__43342#","p1__43343#","fst","snd","get-value","G__43344","G__43345","G__43346","G__43347","table-editor.table/on-change","content","column","value","and__4115__auto__","table-editor.utils/non-number","cljs.core.async.put_BANG_","table-editor.channels/table-updated","cljs.core/assoc-in","numb","js/parseFloat","js/isNaN","table-editor.table/table","map__43350","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","data","sum","average","table-editor.state/state","cljs.core.concat","iter__4529__auto__","s__43353","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__43355","cljs.core/chunk-buffer","i__43354","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43352","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","index","cljs.core.range","p1__43348#","p2__43349#","cljs.core/chunk-first"],"sourcesContent":["(ns table-editor.table\n  (:require\n   [cljs.core.async :refer [put!]]\n   [table-editor.state :refer [state]]\n   [table-editor.channels :refer [table-updated]]\n   [table-editor.utils :refer [non-number]]))\n\n(defn table-row [row on-change header?]\n  (let [fst (row 0) snd (row 1)\n        get-value #(-> % .-target .-value)]\n    [:div.table-row\n     [:input.table-cell {:class (when header? \"table-cell-header\") :value fst :on-change #(on-change 0 (get-value %))}]\n     [:input.table-cell {:class (when header? \"table-cell-header\") :value snd :on-change #(on-change 1 (get-value %))}]]))\n\n(defn on-change [content row column value]\n  (when (and (non-number value) (== column 0))\n    (put! table-updated (assoc-in content [row column] value)))\n  (when (== column 1)\n    (let [numb (js/parseFloat value)]\n      (put! table-updated (assoc-in content [row column] (if (js/isNaN numb) \"0\" (str numb)))))))\n\n(defn table []\n  (let [{:keys [data sum average]} @state]\n    (when data\n      [:div.content\n       [:div.aggregations\n        (when data\n          [:div.aggregation (concat \"Sum: \" (str sum))])\n        (when data\n          [:div.aggregation (concat \"Average: \" (str average))])]\n       (when data\n         [:div.table\n          (for [index (range (count data))]\n            (let [row (data index)]\n              ^{:key (str index)} [table-row row #(on-change data index %1 %2) (== index 0)]))])])))\n"]}