{"version":3,"sources":["table_editor/channels.cljs"],"mappings":"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","names":["table-editor.channels/large-file-size","table-editor.channels/get-first","e","table-editor.channels/extract-result","content","goog.labs.format.csv/parse","cljs.core.js__GT_clj","table-editor.channels/file-uploaded","cljs.core.async.chan","cljs.core.map","table-editor.channels/file-read","c__28103__auto__","cljs.core.async.impl.dispatch/run","f__28104__auto__","switch__28011__auto__","state_31425","state_val_31426","cljs.core.async.impl.ioc-helpers/take!","inst_31395","inst_31396","statearr-31427","statearr-31428","inst_31399","inst_31398","js/FileReader","inst_31400","statearr-31429","statearr-31430","statearr-31431","inst_31423","cljs.core.async.impl.ioc-helpers/return-chan","inst_31402","inst_31403","inst_31404","inst_31405","inst_31406","cljs.core/PersistentHashMap","inst_31407","statearr-31432","inst_31409","inst_31410","inst_31411","inst_31412","inst_31413","inst_31414","p1__31393#","inst_31415","inst_31416","statearr-31433","statearr-31434","inst_31418","statearr-31435","inst_31420","statearr-31436","statearr-31437","statearr-31438","state-machine__28012__auto__","ret-value__28013__auto__","result__28014__auto__","cljs.core/keyword-identical?","ex__28015__auto__","e31439","statearr-31440","cljs.core/seq","statearr-31441","cljs.core/first","state__28105__auto__","statearr-31442","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","file","file-reader","size","cljs.core/reset!","table-editor.state/state","cljs.core.concat","cljs.core.async.put_BANG_","state_31451","state_val_31452","statearr-31453","inst_31449","inst_31445","inst_31446","statearr-31454","statearr-31455","statearr-31456","e31457","statearr-31458","statearr-31459","statearr-31460","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns table-editor.channels\n  (:require\n   [cljs.core.async :refer [chan put! <!]]\n   [table-editor.state :refer [state]]\n   [goog.labs.format.csv :as csv])\n  (:require-macros\n   [cljs.core.async.macros :refer [go-loop]]))\n\n(def large-file-size 10000) ;; 10KB\n\n;; -------------------------\n;; Transducers\n\n(defn get-first [e]\n  (-> e .-target .-files (aget 0)))\n\n(defn extract-result [content]\n  (-> content .-target .-result csv/parse js->clj))\n\n;; -------------------------\n;; Channels\n\n(def file-uploaded (chan 1 (map get-first)))\n\n(def file-read (chan 1 (map extract-result)))\n\n;; -------------------------\n;; Loops\n\n(go-loop [file (<! file-uploaded)]\n  (let [file-reader (js/FileReader.)\n        size (.-size file)]\n    (if (> size large-file-size)\n      (reset! state {:err-msg (concat \"File is too large! Max possible size is \" (str large-file-size))})\n      (do\n        (reset! state {:file-name (.-name file) :err-msg nil})\n        (set! (.-onload file-reader) #(put! file-read %))\n        (.readAsText file-reader file)))\n    (recur (<! file-uploaded))))\n\n(go-loop []\n  (swap! state assoc :data (<! file-read))\n  (recur))\n"]}