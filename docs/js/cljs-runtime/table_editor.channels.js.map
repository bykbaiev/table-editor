{"version":3,"sources":["table_editor/channels.cljs"],"mappings":"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","names":["table-editor.channels/large-file-size","table-editor.channels/first-correct","row","cljs.core/count","p1__43176#","cljs.core/every?","table-editor.utils/non-number","table-editor.channels/rest-correct","rows","p1__43177#","and__4115__auto__","cljs.core.get","cljs.core/not","table-editor.channels/is-valid","content","fst","cljs.core/first","rst","cljs.core/rest","table-editor.channels/get-first","e","table-editor.channels/extract-result","goog.labs.format.csv/parse","cljs.core.js__GT_clj","table-editor.channels/file-uploaded","cljs.core.async.chan","cljs.core.map","table-editor.channels/file-read","table-editor.channels/table-updated","c__28103__auto__","cljs.core.async.impl.dispatch/run","f__28104__auto__","switch__28011__auto__","state_43212","state_val_43213","cljs.core.async.impl.ioc-helpers/take!","inst_43180","inst_43181","statearr-43214","statearr-43215","inst_43184","inst_43183","js/FileReader","inst_43185","statearr-43216","statearr-43217","statearr-43218","inst_43210","cljs.core.async.impl.ioc-helpers/return-chan","inst_43187","inst_43188","inst_43189","inst_43190","inst_43191","inst_43192","inst_43193","cljs.core/PersistentHashMap","inst_43194","statearr-43219","inst_43196","inst_43197","inst_43198","inst_43199","inst_43200","inst_43201","p1__43178#","inst_43202","inst_43203","statearr-43220","statearr-43221","inst_43205","statearr-43222","inst_43207","statearr-43223","statearr-43224","statearr-43225","state-machine__28012__auto__","ret-value__28013__auto__","result__28014__auto__","cljs.core/keyword-identical?","ex__28015__auto__","e43226","statearr-43227","cljs.core/seq","statearr-43228","state__28105__auto__","statearr-43229","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","file","file-reader","size","cljs.core/reset!","table-editor.state/state","cljs.core.concat","cljs.core.async.put_BANG_","state_43250","state_val_43251","inst_43231","inst_43232","statearr-43252","statearr-43253","inst_43234","statearr-43254","statearr-43255","inst_43248","inst_43236","statearr-43256","inst_43238","inst_43239","inst_43240","inst_43241","statearr-43257","inst_43243","statearr-43258","inst_43245","statearr-43259","statearr-43260","statearr-43261","e43262","statearr-43263","statearr-43264","statearr-43265","state_43286","state_val_43287","inst_43268","inst_43269","statearr-43288","statearr-43289","inst_43271","p1__43266#","inst_43272","inst_43273","inst_43274","inst_43275","inst_43276","inst_43277","inst_43278","inst_43279","statearr-43290","inst_43284","inst_43281","statearr-43291","statearr-43292","statearr-43293","e43294","statearr-43295","statearr-43296","statearr-43297","js/parseFloat","cljs.core.reduce","cljs.core/+","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns table-editor.channels\n  (:require\n   [cljs.core.async :refer [chan put! <!]]\n   [goog.labs.format.csv :as csv]\n   [table-editor.state :refer [state]]\n   [table-editor.utils :refer [non-number]])\n  (:require-macros\n   [cljs.core.async.macros :refer [go-loop]]))\n\n(def large-file-size 10000) ;; 10KB\n\n(defn first-correct [row]\n  (and (== (count row) 2) (every? #(non-number %) row)))\n\n(defn rest-correct [rows]\n  (every? #(and (== (count %) 2) (non-number (get % 0)) (not (non-number (get % 1)))) rows))\n\n(defn is-valid [content]\n  (if (or (nil? content) (== (count content) 0))\n    true\n    (let [fst (first content)\n          rst (rest content)]\n      (and (first-correct fst) (rest-correct rst)))))\n\n;; -------------------------\n;; Transducers\n\n(defn get-first [e]\n  (-> e .-target .-files (aget 0)))\n\n(defn extract-result [content]\n  (-> content .-target .-result csv/parse js->clj))\n\n;; -------------------------\n;; Channels\n\n(def file-uploaded (chan 1 (map get-first)))\n\n(def file-read (chan 1 (map extract-result)))\n\n(def table-updated (chan 1))\n\n;; -------------------------\n;; Loops\n\n(go-loop [file (<! file-uploaded)]\n  (let [file-reader (js/FileReader.)\n        size (.-size file)]\n    (if (> size large-file-size)\n      (reset! state {:err-msg (concat \"File is too large! Max possible size is \" (str large-file-size) \" (\" (str (/ large-file-size 1000)) \" KB)\")})\n      (do\n        (reset! state {:file-name (.-name file) :err-msg nil})\n        (set! (.-onload file-reader) #(put! file-read %))\n        (.readAsText file-reader file)))\n    (recur (<! file-uploaded))))\n\n(go-loop [content (<! file-read)]\n  (do\n    (if (is-valid content)\n      (put! table-updated content)\n      (reset! state {:err-msg \"Invalid format: there should be 2 columns, first with names and second one with numbers\"}))\n    (recur (<! file-read))))\n\n(go-loop [content (<! table-updated)]\n  (let [nums (map #(js/parseFloat (% 1)) (rest content))\n        sum (reduce + 0 nums)\n        average (/ sum (count nums))]\n    (swap! state assoc :data content)\n    (swap! state assoc :average average)\n    (swap! state assoc :sum sum)\n    (recur (<! table-updated))))\n"]}